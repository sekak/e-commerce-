{"ast":null,"code":"var _jsxFileName = \"/home/med/Desktop/MERN/client/src/List/List.jsx\";\nimport \"./List.scss\";\nimport Card from \"../components/Card/Card\";\nimport useFetched from \"../hook/useFetched\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst List = ({\n  data,\n  filter,\n  max,\n  sort\n}) => {\n  var _update;\n  //  let updateData\n  //  //filter by filter\n  //   filter ? (updateData = data.filter(it => it.subCategories.includes(filter) )) : updateData = data\n  // //filter by max\n  // updateData =   updateData.filter(it=> it.newPrice < max)\n  // //filter by price\n  // updateData = sort === \"asc\" ?  updateData.sort((a,b)=>a.newPrice - b.newPrice) : updateData.sort((a,b)=>b.newPrice - a.newPrice) \n  let update = data;\n  update = data.filter(it => filter.some(iter => it.subCategories.includes(iter)));\n  //filter by max price\n  update = update.filter(it => it.newPrice < max);\n  //filter by asc or dsc\n  update = sort === \"asc\" ? update.sort((a, b) => a.newPrice - b.newPrice) : update.sort((a, b) => b.newPrice - a.newPrice);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"list\",\n    children: (_update = update) === null || _update === void 0 ? void 0 : _update.map(item => /*#__PURE__*/_jsxDEV(Card, {\n      item: item\n    }, item.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_c = List;\nexport default List;\n\n// import \"./List.scss\";\n// import Card from \"../components/Card/Card\";\n// import useFetched from \"../hook/useFetched\";\n\n// const List = ({ params, sort, max, filter }) => {\n//   const { data, error, loading } = useFetched(\n//     `/products?populate=*&[filters][categories][title][$eq]=${params}${filter.map(\n//       (item) => `&[filters][sub_categories][title][$eq]=${item}`\n//     )}&[filters][price][$lt]=${max}&sort=price:${sort}`\n//   );\n//    return (\n//     <div className=\"list\">\n//       {error ? \"something is wrong!\" : loading ? \"loading\" : data.map((item) => (\n//          <Card item={item} key={item.id} />\n//       ))}\n//     </div>\n//   );\n// };\nvar _c;\n$RefreshReg$(_c, \"List\");","map":{"version":3,"names":["Card","useFetched","useState","useEffect","jsxDEV","_jsxDEV","List","data","filter","max","sort","_update","update","it","some","iter","subCategories","includes","newPrice","a","b","className","children","map","item","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/med/Desktop/MERN/client/src/List/List.jsx"],"sourcesContent":["import \"./List.scss\";\nimport Card from \"../components/Card/Card\";\nimport useFetched from \"../hook/useFetched\";\nimport { useState, useEffect } from \"react\";\n\nconst List = ({ data, filter, max, sort }) => {\n  //  let updateData\n  //  //filter by filter\n  //   filter ? (updateData = data.filter(it => it.subCategories.includes(filter) )) : updateData = data\n  // //filter by max\n  // updateData =   updateData.filter(it=> it.newPrice < max)\n  // //filter by price\n  // updateData = sort === \"asc\" ?  updateData.sort((a,b)=>a.newPrice - b.newPrice) : updateData.sort((a,b)=>b.newPrice - a.newPrice) \n  let update  = data\n  update = data.filter(it => filter.some(iter => it.subCategories.includes(iter)))  \n  //filter by max price\n  update =   update.filter(it=> it.newPrice < max)\n  //filter by asc or dsc\n  update = sort === \"asc\" ? update.sort((a,b)=>a.newPrice - b.newPrice ): update.sort((a,b)=>b.newPrice - a.newPrice )\n\n  return (\n    <div className=\"list\">\n      {update?.map((item) => (\n        <Card item={item} key={item.id} />\n      ))}\n    </div>\n  );\n};\n\nexport default List;\n\n// import \"./List.scss\";\n// import Card from \"../components/Card/Card\";\n// import useFetched from \"../hook/useFetched\";\n\n// const List = ({ params, sort, max, filter }) => {\n//   const { data, error, loading } = useFetched(\n//     `/products?populate=*&[filters][categories][title][$eq]=${params}${filter.map(\n//       (item) => `&[filters][sub_categories][title][$eq]=${item}`\n//     )}&[filters][price][$lt]=${max}&sort=price:${sort}`\n//   );\n//    return (\n//     <div className=\"list\">\n//       {error ? \"something is wrong!\" : loading ? \"loading\" : data.map((item) => (\n//          <Card item={item} key={item.id} />\n//       ))}\n//     </div>\n//   );\n// };\n"],"mappings":";AAAA,OAAO,aAAa;AACpB,OAAOA,IAAI,MAAM,yBAAyB;AAC1C,OAAOC,UAAU,MAAM,oBAAoB;AAC3C,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,IAAI,GAAGA,CAAC;EAAEC,IAAI;EAAEC,MAAM;EAAEC,GAAG;EAAEC;AAAK,CAAC,KAAK;EAAA,IAAAC,OAAA;EAC5C;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIC,MAAM,GAAIL,IAAI;EAClBK,MAAM,GAAGL,IAAI,CAACC,MAAM,CAACK,EAAE,IAAIL,MAAM,CAACM,IAAI,CAACC,IAAI,IAAIF,EAAE,CAACG,aAAa,CAACC,QAAQ,CAACF,IAAI,CAAC,CAAC,CAAC;EAChF;EACAH,MAAM,GAAKA,MAAM,CAACJ,MAAM,CAACK,EAAE,IAAGA,EAAE,CAACK,QAAQ,GAAGT,GAAG,CAAC;EAChD;EACAG,MAAM,GAAGF,IAAI,KAAK,KAAK,GAAGE,MAAM,CAACF,IAAI,CAAC,CAACS,CAAC,EAACC,CAAC,KAAGD,CAAC,CAACD,QAAQ,GAAGE,CAAC,CAACF,QAAS,CAAC,GAAEN,MAAM,CAACF,IAAI,CAAC,CAACS,CAAC,EAACC,CAAC,KAAGA,CAAC,CAACF,QAAQ,GAAGC,CAAC,CAACD,QAAS,CAAC;EAEpH,oBACEb,OAAA;IAAKgB,SAAS,EAAC,MAAM;IAAAC,QAAA,GAAAX,OAAA,GAClBC,MAAM,cAAAD,OAAA,uBAANA,OAAA,CAAQY,GAAG,CAAEC,IAAI,iBAChBnB,OAAA,CAACL,IAAI;MAACwB,IAAI,EAAEA;IAAK,GAAMA,IAAI,CAACC,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAClC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACC,EAAA,GAtBIxB,IAAI;AAwBV,eAAeA,IAAI;;AAEnB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}