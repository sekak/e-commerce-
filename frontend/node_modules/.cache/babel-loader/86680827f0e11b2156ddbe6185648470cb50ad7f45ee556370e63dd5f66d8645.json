{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  products: []\n};\nexport const cartReducer = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart: (state, action) => {\n      const item = state.products.find(item => item.id === action.payload.id);\n      if (item) item.quantity += action.payload.quantity;else state.products.push(action.payload);\n    },\n    removeFromCart: (state, action) => {\n      state.products = state.products.filter(item => item.id !== action.payload.id);\n    },\n    restCart: state => {\n      state.products = [];\n    }\n  }\n});\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    }\n  }\n});\nexport const {\n  addToCart,\n  removeFromCart,\n  restCart\n} = cartReducer.actions;\nexport default cartReducer.reducer;","map":{"version":3,"names":["createSlice","initialState","products","cartReducer","name","reducers","addToCart","state","action","item","find","id","payload","quantity","push","removeFromCart","filter","restCart","counterSlice","increment","value","decrement","actions","reducer"],"sources":["/home/med/Desktop/MERN/client/src/redux/cartReducer.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  products: [],\n};\n\nexport const cartReducer = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart: (state, action) => {\n      const item = state.products.find((item) => item.id === action.payload.id);\n      if (item) item.quantity += action.payload.quantity;\n      else state.products.push(action.payload)\n    },\n    removeFromCart: (state, action) => {\n      state.products = state.products.filter(\n        (item) => item.id !== action.payload.id\n      );\n    },\n    restCart: (state) => {\n      state.products = [];\n    },\n  },\n});\n\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1\n    },\n    decrement: (state) => {\n      state.value -= 1\n    },\n \n  },\n})\n\n\nexport const {addToCart, removeFromCart, restCart } = cartReducer.actions;\n\nexport default cartReducer.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE;AACZ,CAAC;AAED,OAAO,MAAMC,WAAW,GAAGH,WAAW,CAAC;EACrCI,IAAI,EAAE,MAAM;EACZH,YAAY;EACZI,QAAQ,EAAE;IACRC,SAAS,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC5B,MAAMC,IAAI,GAAGF,KAAK,CAACL,QAAQ,CAACQ,IAAI,CAAED,IAAI,IAAKA,IAAI,CAACE,EAAE,KAAKH,MAAM,CAACI,OAAO,CAACD,EAAE,CAAC;MACzE,IAAIF,IAAI,EAAEA,IAAI,CAACI,QAAQ,IAAIL,MAAM,CAACI,OAAO,CAACC,QAAQ,CAAC,KAC9CN,KAAK,CAACL,QAAQ,CAACY,IAAI,CAACN,MAAM,CAACI,OAAO,CAAC;IAC1C,CAAC;IACDG,cAAc,EAAEA,CAACR,KAAK,EAAEC,MAAM,KAAK;MACjCD,KAAK,CAACL,QAAQ,GAAGK,KAAK,CAACL,QAAQ,CAACc,MAAM,CACnCP,IAAI,IAAKA,IAAI,CAACE,EAAE,KAAKH,MAAM,CAACI,OAAO,CAACD,EACvC,CAAC;IACH,CAAC;IACDM,QAAQ,EAAGV,KAAK,IAAK;MACnBA,KAAK,CAACL,QAAQ,GAAG,EAAE;IACrB;EACF;AACF,CAAC,CAAC;AAGF,OAAO,MAAMgB,YAAY,GAAGlB,WAAW,CAAC;EACtCI,IAAI,EAAE,SAAS;EACfH,YAAY;EACZI,QAAQ,EAAE;IACRc,SAAS,EAAGZ,KAAK,IAAK;MACpB;MACA;MACA;MACA;MACAA,KAAK,CAACa,KAAK,IAAI,CAAC;IAClB,CAAC;IACDC,SAAS,EAAGd,KAAK,IAAK;MACpBA,KAAK,CAACa,KAAK,IAAI,CAAC;IAClB;EAEF;AACF,CAAC,CAAC;AAGF,OAAO,MAAM;EAACd,SAAS;EAAES,cAAc;EAAEE;AAAS,CAAC,GAAGd,WAAW,CAACmB,OAAO;AAEzE,eAAenB,WAAW,CAACoB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}